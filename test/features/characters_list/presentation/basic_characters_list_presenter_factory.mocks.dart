// Mocks generated by Mockito 5.0.16 from annotations
// in rick_and_morty/test/features/characters_list/presentation/basic_characters_list_presenter_factory.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rick_and_morty/domain/entities/common/result.dart' as _i2;
import 'package:rick_and_morty/domain/use_cases/get_characters_use_case.dart'
    as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResult_0<T> extends _i1.Fake implements _i2.Result<T> {}

/// A class which mocks [GetCharactersUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCharactersUseCase extends _i1.Mock
    implements _i3.GetCharactersUseCase {
  MockGetCharactersUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<_i3.GetCharactersOutput>> execute(
          _i3.GetCharactersInput? input) =>
      (super.noSuchMethod(Invocation.method(#execute, [input]),
              returnValue: Future<_i2.Result<_i3.GetCharactersOutput>>.value(
                  _FakeResult_0<_i3.GetCharactersOutput>()))
          as _i4.Future<_i2.Result<_i3.GetCharactersOutput>>);
  @override
  String toString() => super.toString();
}
